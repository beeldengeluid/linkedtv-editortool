angular.module('linkedtv').controller('multipleLinkModalController',
	['$scope', '$modalInstance', '$rootScope', 'conf', 'entityProxyService', 'enrichmentService', 'chapterCollection',
	'entityCollection', 'enrichmentUtils', 'entityUtils', 'dimension',
	function ($scope, $modalInstance, $rootScope, conf, entityProxyService, enrichmentService, chapterCollection,
	 entityCollection, enrichmentUtils, entityUtils, dimension) {

	//currently selected dimension
	$scope.dimension = dimension;

	//make sure these utilities are available in the template
	$scope.enrichmentUtils = enrichmentUtils;
	$scope.entityUtils = entityUtils;

	//collapse states (for the template)
	$scope.enrichmentsCollapsed = false;
	$scope.savedEnrichmentsCollapsed = false;
	$scope.entitiesCollapsed = false;

	//template variables
	$scope.nothingFound = false;
	$scope.fetchButtonText = 'Search';

	//show expanded entities
	$scope.entityExpansion = conf.programmeConfig.entityExpansion;

	//populate the 3 levels of entities (expanded entities are only shown if $scope.entityExpansion == true)
	$scope.combinedEnrichments =  chapterCollection.getAllEnrichmentsOfChapter() || []; //get the combined enrichments from all dimensions
	$scope.autogeneratedEntities = entityCollection.getChapterEntities();//fetch the correct entities from the entityCollection
	$scope.expandedEntities = chapterCollection.getActiveChapter().expandedEntities || [];

	//enrichments that are saved to the dimension
	$scope.savedEnrichments = chapterCollection.getSavedEnrichmentsOfDimension(dimension) || null;

	//query input that will be sent to the server for searching enrichments on demand
	$scope.enrichmentQuery = '';//the query that will be sent to the enrichmentService
	$scope.activeEntities = {};//selected entities

	//environment variables to keep track of the enrichments that were retrieved via search (but not yet saved)
	$scope.allEnrichments = null; //all fetched enrichments (unfiltered)
	$scope.enrichments = [];//fetched & filtered enrichment
	$scope.enrichmentSources = null; //allEnrichments filtered by link source
	$scope.enrichmentEntitySources = null;//allEnrichments filtered by the entities they are based on
	$scope.enrichmentQueries = [];//queries issued on the server to call the related enrichment API
	$scope.freshlyAddedEnrichments = []//used to keep track of what the user selects per query; flushed after each search
	$scope.activeEnrichmentSource = null; //current source filter
	$scope.activeEnrichmentEntitySource = null; //current entity source filter

	//the actual enrichments will be shown in the enrichment tab
	$scope.fetchEnrichments = function() {
		$scope.xhrCancelled = false;
		$scope.enrichmentQuery = $('#e_query').val();//FIXME ugly hack, somehow the ng-model does not work in this form!!!
		if ($scope.enrichmentQuery != '' || !$scope.isEmpty($scope.activeEntities)) {
			//update the text of the search button
			$scope.fetchButtonText = 'Loading...';

			//reset this as each search implies a new record for logging user search behaviour
			$scope.freshlyAddedEnrichments = [];

			//prepare a list of entities to send to the enrichment service
			var entities = [];
			_.each($scope.activeEntities, function(value, key) {
				entities.push(value);
			});

			//issue the search
			enrichmentService.search($scope.enrichmentQuery, entities, $scope.dimension, $scope.onSearchEnrichments);
		} else {
			alert('Please specify a query');
		}
	};

	$scope.onSearchEnrichments = function(enrichments, queries, requestAborted) {
		//reset the button and the selected entities
		$scope.fetchButtonText = 'Find links';
		$scope.enrichmentsCollapsed = false;
		if(enrichments) {
			//apply the enrichments to the scope
			$scope.$apply(function() {
				$scope.enrichmentsCollapsed = false;
				$scope.nothingFound = false;
				$scope.enrichmentSources = enrichments.enrichmentSources;
				$scope.enrichmentEntitySources = enrichments.enrichmentEntitySources;
				$scope.allEnrichments = enrichments.allEnrichments;
				$scope.enrichmentQueries = queries;
				//when calling filterEnrichmentsBySource() the view is not updated properly, so had to copy the code here...
				$scope.activeEnrichmentSource = $scope.enrichmentSources[0];
				$scope.enrichments = _.filter($scope.allEnrichments, function(e) {
					if(e.source === $scope.activeEnrichmentSource) {
						return e;
				}
		});
			});
		} else if(!requestAborted) {
			alert('No enrichments found');
			$scope.$apply(function() {
				$scope.enrichmentsCollapsed = true;
				$scope.nothingFound = true;
				$scope.enrichments = [];
				$scope.allEnrichments = [];
				$scope.enrichmentQueries = [];
				$scope.enrichmentSources = [];
				$scope.enrichmentEntitySources = [];
				$scope.activeEnrichmentSource = null;
				$scope.activeEnrichmentEntitySource = null;
			});
		}
	}

	$scope.addEnrichment = function(enrichment) {
		//add the active entities so it's clear on what basis the enrichment was found
		var entities = []
		_.each($scope.activeEntities, function(e, i) {
			entities.push(e);
		});
		enrichment.entities = entities;
		$scope.savedEnrichments.push(enrichment);
		$scope.freshlyAddedEnrichments.push(enrichment);//also add it to the logging list
	}

	$scope.removeEnrichment = function(index) {
		var e = $scope.savedEnrichments[index];
		var addIndex = -1;
		console.debug('removing this enrichment:');
		console.debug(e);
		for (var i=0;i<$scope.freshlyAddedEnrichments.length;i++) {
			console.debug($scope.freshlyAddedEnrichments[i].url + ' ' + e.url);
			if($scope.freshlyAddedEnrichments[i].url == e.url) {
				addIndex = i;
				break;
			}
		}
		//(if found) also remove it from the logging list
		if(addIndex != -1) {
			console.debug('removing from freshlyAddedEnrichments')
			$scope.freshlyAddedEnrichments.splice(addIndex, 1);
			console.debug($scope.freshlyAddedEnrichments);
		}
		$scope.savedEnrichments.splice(index, 1);

	}

	//filters the enrichments by source
	$scope.filterEnrichmentsBySource = function(source) {
		$scope.activeEnrichmentSource = source;
		$scope.enrichments = _.filter($scope.allEnrichments, function(e) {
			if(e.source === source) {
				return e;
			}
		});
	}

	//filters the enrichments by source
	$scope.filterEnrichmentsByEntitySource = function(entitySource) {
		$scope.activeEnrichmentEntitySource = entitySource;
		$scope.enrichments = _.filter($scope.allEnrichments, function(e) {
			if(e.entities.indexOf(entitySource) != -1) {
				return e;
			}
		});
	}

	//----------------------------SELECTING ENRICHMENTS & ENTITIES------------------------------

	$scope.addQueryEntity = function(entity) {
		if(!$scope.activeEntities[entity.label]) {
			$scope.activeEntities[entity.label] = entity;
		}
		$scope.updateEnrichmentQuery();
	}

	$scope.removeQueryEntity = function(entityLabel) {
		delete $scope.activeEntities[entityLabel];
		$scope.updateEnrichmentQuery();
	}

	$scope.updateEnrichmentQuery = function() {
		var labels = [];
		_.each($scope.activeEntities, function(e){
			labels.push(e.label);
		})
		//$('#e_query').val(labels.join('+'));
	}

	$scope.isEmpty = function(obj) {
		return Object.keys(obj).length === 0;
	}

	//----------------------------BUTTON PANEL------------------------------

	$scope.ok = function () {
		if($scope.savedEnrichments) {
			enrichmentService.cancelRequest();
			$modalInstance.close({
				dimension: $scope.dimension,
				savedEnrichments : $scope.savedEnrichments,
				freshlySavedEnrichments : $scope.freshlyAddedEnrichments,
				allEnrichments : $scope.allEnrichments,
				queries : $scope.enrichmentQueries
			});
		} else {
			alert('Please add a label');
		}
	};

	$scope.cancel = function () {
		enrichmentService.cancelRequest();
		$modalInstance.dismiss('cancel');
	};

	//----------------------------UPDATE EVENTS FROM ENTITY EXPANSION------------------------------

	//this function will update the expanded entities when they are shown
	$scope.update = function(chapters) {
		//fetch the expandedentities from the active chapter
		for(c in chapters) {
			console.debug(chapters[c]);
			if(chapters[c].guid == chapterCollection.getActiveChapter().guid) {
				$scope.$apply(function() {
					$scope.expandedEntities = chapters[c].expandedEntities;
				});
				break;
			}
		}
	}

	chapterCollection.addObserver($scope.update);

}]);